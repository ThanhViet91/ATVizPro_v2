Index: ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/FragmentSettings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.atsoft.screenrecord.ui.fragments;\r\n\r\nimport static com.atsoft.screenrecord.ui.utils.MyUtils.ACTION_UPDATE_SHOW_HIDE_FAB;\r\nimport static com.atsoft.screenrecord.ui.utils.MyUtils.dirSizeString;\r\nimport static com.atsoft.screenrecord.ui.utils.MyUtils.getAvailableSizeExternal;\r\nimport static com.atsoft.screenrecord.ui.utils.MyUtils.getBaseStorageDirectory;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.android.billingclient.api.BillingClient;\r\nimport com.android.billingclient.api.BillingClientStateListener;\r\nimport com.android.billingclient.api.BillingResult;\r\nimport com.android.billingclient.api.PurchaseHistoryRecord;\r\nimport com.android.billingclient.api.QueryProductDetailsParams;\r\nimport com.android.billingclient.api.QueryPurchaseHistoryParams;\r\nimport com.atsoft.screenrecord.AppConfigs;\r\nimport com.atsoft.screenrecord.Core;\r\nimport com.atsoft.screenrecord.R;\r\nimport com.atsoft.screenrecord.adapter.SettingsAdapter;\r\nimport com.atsoft.screenrecord.controllers.settings.SettingManager2;\r\nimport com.atsoft.screenrecord.model.Results;\r\nimport com.atsoft.screenrecord.model.SettingsItem;\r\nimport com.atsoft.screenrecord.ui.activities.MainActivity;\r\nimport com.atsoft.screenrecord.utils.AdsUtil;\r\nimport com.atsoft.screenrecord.utils.OnSingleClickListener;\r\nimport com.atsoft.screenrecord.utils.RetrofitClient;\r\nimport com.google.common.collect.ImmutableList;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.json.JSONException;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class FragmentSettings extends Fragment implements SettingsAdapter.SettingsListener {\r\n\r\n    RecyclerView recyclerView;\r\n    ArrayList<SettingsItem> settingsItems = new ArrayList<>();\r\n    private FragmentManager mFragmentManager;\r\n    private MainActivity mActivity;\r\n    private SettingsAdapter adapter;\r\n    View mViewRoot;\r\n    private AdsUtil mAdManager;\r\n\r\n    @SuppressLint(\"DefaultLocale\")\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NotNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        if (mViewRoot != null) return mViewRoot;\r\n        mViewRoot = inflater.inflate(R.layout.fragment_settings_home, container, false);\r\n        settingsItems.clear();\r\n        settingsItems.add(new SettingsItem(getString(R.string.upgrade_to_pro), R.drawable.ic_crown));\r\n        settingsItems.add(new SettingsItem(getString(R.string.restore_purchase), R.drawable.ic_restore));\r\n        settingsItems.add(new SettingsItem(getString(R.string.how_to_record_your_screen), R.drawable.ic_how_to_record));\r\n        settingsItems.add(new SettingsItem(getString(R.string.how_to_livestream), R.drawable.ic_how_to_live_setting));\r\n        settingsItems.add(new SettingsItem(getString(R.string.floating_button), R.drawable.ic_fab_settings));\r\n        settingsItems.add(new SettingsItem(getString(R.string.support_us_by_rating_our_app), R.drawable.ic_heart));\r\n        settingsItems.add(new SettingsItem(getString(R.string.share_app_to_friends), R.drawable.ic_share_settings2));\r\n        settingsItems.add(new SettingsItem(getString(R.string.available_storage_2_43gb) + \" \" + String.format(\"%.1f\", getAvailableSizeExternal()) + \" GB\", R.drawable.ic_available_storage));\r\n        settingsItems.add(new SettingsItem(getString(R.string.recording_cache_0_kb) + \" \" + dirSizeString(new File(getBaseStorageDirectory())), R.drawable.ic_recording_cache));\r\n        settingsItems.add(new SettingsItem(getString(R.string.contact_us), R.drawable.ic_letter));\r\n\r\n        mAdView = mViewRoot.findViewById(R.id.adView);\r\n        mAdManager = new AdsUtil(requireContext(), mAdView);\r\n\r\n        return mViewRoot;\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        recyclerView = view.findViewById(R.id.recycler_view_position);\r\n        adapter = new SettingsAdapter(getContext(), settingsItems);\r\n        adapter.setListener(this);\r\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getContext());\r\n        recyclerView.setAdapter(adapter);\r\n        recyclerView.setLayoutManager(linearLayoutManager);\r\n\r\n        ImageView btn_back = view.findViewById(R.id.img_btn_back_header);\r\n        btn_back.setOnClickListener(new OnSingleClickListener() {\r\n            @Override\r\n            public void onSingleClick(View v) {\r\n                ((MainActivity) requireActivity()).checkShowAd();\r\n                mFragmentManager.popBackStack();\r\n            }\r\n        });\r\n\r\n\r\n        billingClient = BillingClient.newBuilder(requireContext())\r\n                .enablePendingPurchases()\r\n                .setListener((billingResult, list) -> {\r\n\r\n                })\r\n                .build();\r\n        connectGooglePlayBilling();\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n        mFragmentManager = getParentFragmentManager();\r\n        mActivity = (MainActivity) getActivity();\r\n    }\r\n\r\n    RelativeLayout mAdView;\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        if (mAdManager != null) mAdManager.loadBanner();\r\n        if (adapter != null) adapter.notifyDataSetChanged();\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n    }\r\n\r\n    private BillingClient billingClient;\r\n\r\n    private void getPurchaseHistory() {\r\n        billingClient.startConnection(new BillingClientStateListener() {\r\n            @Override\r\n            public void onBillingServiceDisconnected() {\r\n                requireActivity().runOnUiThread(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (mProgressDialog != null) mProgressDialog.dismiss();\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onBillingSetupFinished(@NonNull BillingResult billingResult) {\r\n                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                    billingClient.queryPurchaseHistoryAsync(\r\n                            QueryPurchaseHistoryParams.newBuilder()\r\n                                    .setProductType(BillingClient.ProductType.SUBS)\r\n                                    .build(),\r\n                            (billingResult1, purchasesHistoryList) -> {\r\n                                requireActivity().runOnUiThread(new Runnable() {\r\n                                    @Override\r\n                                    public void run() {\r\n                                        if (mProgressDialog != null) mProgressDialog.dismiss();\r\n                                    }\r\n                                });\r\n                                if (billingResult1.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                                    if (purchasesHistoryList != null)\r\n                                        mPurchasesHistoryList = new ArrayList<>(purchasesHistoryList);\r\n                                    try {\r\n                                        getPublicTime();\r\n                                    } catch (Exception e) {\r\n//                                        e.printStackTrace();\r\n                                        requireActivity().runOnUiThread(() -> checkPurchase(mPurchasesHistoryList, System.currentTimeMillis()));\r\n                                    }\r\n                                } else {\r\n                                    requireActivity().runOnUiThread(() -> showPopup(\"Something went wrong!\", \"Check your network connection and try again\"));\r\n                                }\r\n                            }\r\n                    );\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private ProgressDialog mProgressDialog;\r\n\r\n    private void buildDialog() {\r\n        if (mProgressDialog == null) {\r\n            mProgressDialog = ProgressDialog.show(getContext(), \"\", \"Connecting...\");\r\n        }\r\n    }\r\n\r\n    private void showPopup(String title, String des) {\r\n        new AlertDialog.Builder(requireContext())\r\n                .setTitle(title)\r\n                .setMessage(des)\r\n                .setPositiveButton(android.R.string.yes, (dialog, which) -> {\r\n                })\r\n                .show();\r\n    }\r\n\r\n    private ArrayList<PurchaseHistoryRecord> mPurchasesHistoryList;\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    private void checkPurchase(List<PurchaseHistoryRecord> purchasesHistoryList, long currentTime) {\r\n\r\n        if (purchasesHistoryList == null || purchasesHistoryList.size() == 0) {\r\n            SettingManager2.setProApp(requireContext(), false);\r\n            showPopup(\"Something went wrong!\", \"This item maybe purchased by a different account. Please change account and try again\");\r\n//            if (adapter != null) adapter.notifyDataSetChanged();\r\n            if (mAdManager != null) mAdManager.loadBanner();\r\n            return;\r\n        }\r\n\r\n        boolean hasId = false;\r\n        for (PurchaseHistoryRecord item : mPurchasesHistoryList) {\r\n            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(0).getKeyID())) {\r\n                hasId = true;\r\n                if ((currentTime - item.getPurchaseTime()) / 1000 > 7 * 24 * 60 * 60) {\r\n                    // qua han\r\n                    SettingManager2.setProApp(requireContext(), false);\r\n                    showPopup(\"Restore Failed!\", \"Your subscription has expired, please upgrade to proversion!\");\r\n                } else {\r\n                    SettingManager2.setProApp(requireContext(), true);\r\n                    showPopup(\"Restore Successfully!\", \"You've successfully restored your purchase!\");\r\n                    if (adapter != null) adapter.notifyDataSetChanged();\r\n                    if (mAdManager != null) mAdManager.loadBanner();\r\n                    return;\r\n                }\r\n            }\r\n            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(1).getKeyID())) {\r\n                hasId = true;\r\n                if ((currentTime - item.getPurchaseTime()) / 1000 > 2592000) {\r\n                    // qua han\r\n                    SettingManager2.setProApp(requireContext(), false);\r\n                    showPopup(\"Restore Failed!\", \"Your subscription has expired, please upgrade to proversion!\");\r\n                } else {\r\n                    SettingManager2.setProApp(requireContext(), true);\r\n                    showPopup(\"Restore Successfully!\", \"You've successfully restored your purchase!\");\r\n                    if (adapter != null) adapter.notifyDataSetChanged();\r\n                    if (mAdManager != null) mAdManager.loadBanner();\r\n                    return;\r\n                }\r\n            }\r\n            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(2).getKeyID())) {\r\n                hasId = true;\r\n                if ((currentTime - item.getPurchaseTime()) / 1000 > 365 * 24 * 60 * 60) {\r\n                    // qua han\r\n                    SettingManager2.setProApp(requireContext(), false);\r\n                    showPopup(\"Restore Failed!\", \"Your subscription has expired, please upgrade to proversion!\");\r\n                } else {\r\n                    SettingManager2.setProApp(requireContext(), true);\r\n                    showPopup(\"Restore Successfully!\", \"You've successfully restored your purchase!\");\r\n                    if (adapter != null) adapter.notifyDataSetChanged();\r\n                    if (mAdManager != null) mAdManager.loadBanner();\r\n                    return;\r\n                }\r\n            }\r\n\r\n        }\r\n        if (!hasId) {\r\n            SettingManager2.setProApp(requireContext(), false);\r\n            showPopup(\"Something went wrong!\", \"This item maybe purchased by a different account. Please change account and try again\");\r\n        }\r\n        if (adapter != null) adapter.notifyDataSetChanged();\r\n        if (mAdManager != null) mAdManager.loadBanner();\r\n    }\r\n\r\n    public void getPublicTime() throws JSONException {\r\n        String tz = TimeZone.getDefault().getID();\r\n        Call<Results> call = RetrofitClient.getInstance().getMyApi().getTimeZone(tz);\r\n        call.enqueue(new Callback<Results>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<Results> call, @NonNull Response<Results> response) {\r\n\r\n                if (response.body() == null) {\r\n                    checkPurchase(mPurchasesHistoryList, System.currentTimeMillis());\r\n                } else\r\n                    checkPurchase(mPurchasesHistoryList, response.body().getDateTimeMs());\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<Results> call, @NonNull Throwable t) {\r\n                checkPurchase(mPurchasesHistoryList, System.currentTimeMillis());\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onClickItem(String code) {\r\n\r\n        if (code.equals(getString(R.string.upgrade_to_pro))) {\r\n            System.out.println(\"thanhlv upgrade_to_pro\");\r\n            mFragmentManager.beginTransaction()\r\n                    .replace(R.id.frame_layout_fragment, new SubscriptionFragment())\r\n                    .addToBackStack(\"\")\r\n                    .commit();\r\n        }\r\n        if (code.equals(getString(R.string.restore_purchase))) {\r\n            buildDialog();\r\n            System.out.println(\"thanhlv restore_purchase\");\r\n            getPurchaseHistory();\r\n        }\r\n\r\n        if (code.equals(getString(R.string.share_app_to_friends))) {\r\n            System.out.println(\"thanhlv share_app_to_friends\");\r\n            Intent sendIntent = new Intent(Intent.ACTION_SEND);\r\n            sendIntent.putExtra(Intent.EXTRA_TEXT,\r\n                    AppConfigs.getInstance().getConfigModel().getShareText());\r\n            sendIntent.setType(\"text/plain\");\r\n            startActivity(Intent.createChooser(sendIntent, \"Choose one\"));\r\n        }\r\n\r\n\r\n        if (code.equals(getString(R.string.how_to_record_your_screen))) {\r\n            System.out.println(\"thanhlv how_to_record_your_screen\");\r\n            mFragmentManager.beginTransaction()\r\n                    .replace(R.id.frame_layout_fragment, new GuidelineScreenRecordFragment(true))\r\n                    .addToBackStack(\"\")\r\n                    .commit();\r\n        }\r\n\r\n        if (code.equals(getString(R.string.how_to_livestream))) {\r\n            System.out.println(\"thanhlv how_to_livestream\");\r\n            mFragmentManager.beginTransaction()\r\n                    .replace(R.id.frame_layout_fragment, new GuidelineLiveStreamFragment(true))\r\n                    .addToBackStack(\"\")\r\n                    .commit();\r\n        }\r\n\r\n        if (code.equals(getString(R.string.floating_button))) {\r\n            mActivity.sendActionToService(ACTION_UPDATE_SHOW_HIDE_FAB);\r\n//            System.out.println(\"thanhlv floating_button \" + SettingManager2.isEnableFAB(requireContext()));\r\n        }\r\n\r\n        if (code.equals(getString(R.string.contact_us))) {\r\n            System.out.println(\"thanhlv contact_us\");\r\n            Intent intent = new Intent(Intent.ACTION_SEND);\r\n            intent.setType(\"message/rfc822\");\r\n            intent.putExtra(Intent.EXTRA_EMAIL, new String[]{AppConfigs.getInstance().getConfigModel().getFeedbackEmail()});\r\n            intent.putExtra(Intent.EXTRA_SUBJECT, \"Hi ATSoft\");\r\n            intent.putExtra(Intent.EXTRA_TEXT, \"Hi ATSoft,\\n\");\r\n            try {\r\n                startActivity(Intent.createChooser(intent, \"Send mail\"));\r\n            } catch (android.content.ActivityNotFoundException e) {\r\n                Toast.makeText(getContext(), \"There are no email clients installed.\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n\r\n        if (code.equals(getString(R.string.support_us_by_rating_our_app))) {\r\n            System.out.println(\"thanhlv support_us_by_rating_our_app\");\r\n//            String url = \"https://play.google.com/store/apps/developer?id=Zzic&hl=vi&gl=US\";\r\n//            Intent i = new Intent(Intent.ACTION_VIEW);\r\n//            i.setData(Uri.parse(url));\r\n//            startActivity(i);\r\n            rateApp();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void rateApp() {\r\n        try {\r\n            Intent rateIntent = rateIntentForUrl(\"market://details\");\r\n            startActivity(rateIntent);\r\n        } catch (ActivityNotFoundException e) {\r\n            Intent rateIntent = rateIntentForUrl(\"https://play.google.com/store/apps/details\");\r\n            startActivity(rateIntent);\r\n        }\r\n    }\r\n\r\n    private Intent rateIntentForUrl(String url) {\r\n        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(\"%s?id=%s\", url, requireContext().getPackageName())));\r\n        int flags = Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_MULTIPLE_TASK;\r\n        if (Build.VERSION.SDK_INT >= 21) {\r\n            flags |= Intent.FLAG_ACTIVITY_NEW_DOCUMENT;\r\n        } else {\r\n            //noinspection deprecation\r\n            flags |= Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET;\r\n        }\r\n        intent.addFlags(flags);\r\n        return intent;\r\n    }\r\n\r\n    private void connectGooglePlayBilling() {\r\n        billingClient.startConnection(new BillingClientStateListener() {\r\n            @Override\r\n            public void onBillingSetupFinished(@NonNull BillingResult billingResult) {\r\n                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                    // The BillingClient is ready. You can query purchases here.\r\n                    showProducts();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onBillingServiceDisconnected() {\r\n                // Try to restart the connection on the next request to\r\n                // Google Play by calling the startConnection() method.\r\n                connectGooglePlayBilling();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    String WEEKLY_ID, MONTHLY_ID, YEARLY_ID;\r\n\r\n    private void showProducts() {\r\n        WEEKLY_ID = AppConfigs.getInstance().getSubsModel().get(0).getKeyID();\r\n        MONTHLY_ID = AppConfigs.getInstance().getSubsModel().get(1).getKeyID();\r\n        YEARLY_ID = AppConfigs.getInstance().getSubsModel().get(2).getKeyID();\r\n\r\n        ImmutableList<QueryProductDetailsParams.Product> productList = ImmutableList.of(\r\n                QueryProductDetailsParams.Product.newBuilder()\r\n                        .setProductId(WEEKLY_ID)\r\n                        .setProductType(BillingClient.ProductType.SUBS)\r\n                        .build(),\r\n                QueryProductDetailsParams.Product.newBuilder()\r\n                        .setProductId(MONTHLY_ID)\r\n                        .setProductType(BillingClient.ProductType.SUBS)\r\n                        .build(),\r\n                QueryProductDetailsParams.Product.newBuilder()\r\n                        .setProductId(YEARLY_ID)\r\n                        .setProductType(BillingClient.ProductType.SUBS)\r\n                        .build()\r\n        );\r\n\r\n        QueryProductDetailsParams params = QueryProductDetailsParams.newBuilder()\r\n                .setProductList(productList)\r\n                .build();\r\n\r\n        billingClient.queryProductDetailsAsync(\r\n                params,\r\n                (billingResult, prodDetailsList) -> {\r\n                    // Process the result\r\n                    Core.productDetails = new ArrayList<>(prodDetailsList);\r\n                }\r\n        );\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/FragmentSettings.java b/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/FragmentSettings.java
--- a/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/FragmentSettings.java	(revision ededf05d19b8549b2772b172d4ea4ca532f549ee)
+++ b/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/FragmentSettings.java	(date 1669261668726)
@@ -11,7 +11,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -34,6 +33,7 @@
 import com.android.billingclient.api.PurchaseHistoryRecord;
 import com.android.billingclient.api.QueryProductDetailsParams;
 import com.android.billingclient.api.QueryPurchaseHistoryParams;
+import com.atsoft.screenrecord.App;
 import com.atsoft.screenrecord.AppConfigs;
 import com.atsoft.screenrecord.Core;
 import com.atsoft.screenrecord.R;
@@ -48,7 +48,6 @@
 import com.google.common.collect.ImmutableList;
 
 import org.jetbrains.annotations.NotNull;
-import org.json.JSONException;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -156,11 +155,8 @@
         billingClient.startConnection(new BillingClientStateListener() {
             @Override
             public void onBillingServiceDisconnected() {
-                requireActivity().runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (mProgressDialog != null) mProgressDialog.dismiss();
-                    }
+                requireActivity().runOnUiThread(() -> {
+                    if (mProgressDialog != null) mProgressDialog.dismiss();
                 });
             }
 
@@ -172,11 +168,8 @@
                                     .setProductType(BillingClient.ProductType.SUBS)
                                     .build(),
                             (billingResult1, purchasesHistoryList) -> {
-                                requireActivity().runOnUiThread(new Runnable() {
-                                    @Override
-                                    public void run() {
-                                        if (mProgressDialog != null) mProgressDialog.dismiss();
-                                    }
+                                requireActivity().runOnUiThread(() -> {
+                                    if (mProgressDialog != null) mProgressDialog.dismiss();
                                 });
                                 if (billingResult1.getResponseCode() == BillingClient.BillingResponseCode.OK) {
                                     if (purchasesHistoryList != null)
@@ -206,6 +199,7 @@
     }
 
     private void showPopup(String title, String des) {
+        if (getContext() == null) return;
         new AlertDialog.Builder(requireContext())
                 .setTitle(title)
                 .setMessage(des)
@@ -220,7 +214,7 @@
     private void checkPurchase(List<PurchaseHistoryRecord> purchasesHistoryList, long currentTime) {
 
         if (purchasesHistoryList == null || purchasesHistoryList.size() == 0) {
-            SettingManager2.setProApp(requireContext(), false);
+            SettingManager2.setProApp(App.getAppContext(), false);
             showPopup("Something went wrong!", "This item maybe purchased by a different account. Please change account and try again");
 //            if (adapter != null) adapter.notifyDataSetChanged();
             if (mAdManager != null) mAdManager.loadBanner();
@@ -233,10 +227,10 @@
                 hasId = true;
                 if ((currentTime - item.getPurchaseTime()) / 1000 > 7 * 24 * 60 * 60) {
                     // qua han
-                    SettingManager2.setProApp(requireContext(), false);
+                    SettingManager2.setProApp(App.getAppContext(), false);
                     showPopup("Restore Failed!", "Your subscription has expired, please upgrade to proversion!");
                 } else {
-                    SettingManager2.setProApp(requireContext(), true);
+                    SettingManager2.setProApp(App.getAppContext(), true);
                     showPopup("Restore Successfully!", "You've successfully restored your purchase!");
                     if (adapter != null) adapter.notifyDataSetChanged();
                     if (mAdManager != null) mAdManager.loadBanner();
@@ -247,10 +241,10 @@
                 hasId = true;
                 if ((currentTime - item.getPurchaseTime()) / 1000 > 2592000) {
                     // qua han
-                    SettingManager2.setProApp(requireContext(), false);
+                    SettingManager2.setProApp(App.getAppContext(), false);
                     showPopup("Restore Failed!", "Your subscription has expired, please upgrade to proversion!");
                 } else {
-                    SettingManager2.setProApp(requireContext(), true);
+                    SettingManager2.setProApp(App.getAppContext(), true);
                     showPopup("Restore Successfully!", "You've successfully restored your purchase!");
                     if (adapter != null) adapter.notifyDataSetChanged();
                     if (mAdManager != null) mAdManager.loadBanner();
@@ -261,10 +255,10 @@
                 hasId = true;
                 if ((currentTime - item.getPurchaseTime()) / 1000 > 365 * 24 * 60 * 60) {
                     // qua han
-                    SettingManager2.setProApp(requireContext(), false);
+                    SettingManager2.setProApp(App.getAppContext(), false);
                     showPopup("Restore Failed!", "Your subscription has expired, please upgrade to proversion!");
                 } else {
-                    SettingManager2.setProApp(requireContext(), true);
+                    SettingManager2.setProApp(App.getAppContext(), true);
                     showPopup("Restore Successfully!", "You've successfully restored your purchase!");
                     if (adapter != null) adapter.notifyDataSetChanged();
                     if (mAdManager != null) mAdManager.loadBanner();
@@ -274,14 +268,14 @@
 
         }
         if (!hasId) {
-            SettingManager2.setProApp(requireContext(), false);
+            SettingManager2.setProApp(App.getAppContext(), false);
             showPopup("Something went wrong!", "This item maybe purchased by a different account. Please change account and try again");
         }
         if (adapter != null) adapter.notifyDataSetChanged();
         if (mAdManager != null) mAdManager.loadBanner();
     }
 
-    public void getPublicTime() throws JSONException {
+    public void getPublicTime() {
         String tz = TimeZone.getDefault().getID();
         Call<Results> call = RetrofitClient.getInstance().getMyApi().getTimeZone(tz);
         call.enqueue(new Callback<Results>() {
@@ -305,7 +299,6 @@
     public void onClickItem(String code) {
 
         if (code.equals(getString(R.string.upgrade_to_pro))) {
-            System.out.println("thanhlv upgrade_to_pro");
             mFragmentManager.beginTransaction()
                     .replace(R.id.frame_layout_fragment, new SubscriptionFragment())
                     .addToBackStack("")
@@ -313,12 +306,10 @@
         }
         if (code.equals(getString(R.string.restore_purchase))) {
             buildDialog();
-            System.out.println("thanhlv restore_purchase");
             getPurchaseHistory();
         }
 
         if (code.equals(getString(R.string.share_app_to_friends))) {
-            System.out.println("thanhlv share_app_to_friends");
             Intent sendIntent = new Intent(Intent.ACTION_SEND);
             sendIntent.putExtra(Intent.EXTRA_TEXT,
                     AppConfigs.getInstance().getConfigModel().getShareText());
@@ -328,7 +319,6 @@
 
 
         if (code.equals(getString(R.string.how_to_record_your_screen))) {
-            System.out.println("thanhlv how_to_record_your_screen");
             mFragmentManager.beginTransaction()
                     .replace(R.id.frame_layout_fragment, new GuidelineScreenRecordFragment(true))
                     .addToBackStack("")
@@ -336,7 +326,6 @@
         }
 
         if (code.equals(getString(R.string.how_to_livestream))) {
-            System.out.println("thanhlv how_to_livestream");
             mFragmentManager.beginTransaction()
                     .replace(R.id.frame_layout_fragment, new GuidelineLiveStreamFragment(true))
                     .addToBackStack("")
@@ -345,11 +334,9 @@
 
         if (code.equals(getString(R.string.floating_button))) {
             mActivity.sendActionToService(ACTION_UPDATE_SHOW_HIDE_FAB);
-//            System.out.println("thanhlv floating_button " + SettingManager2.isEnableFAB(requireContext()));
         }
 
         if (code.equals(getString(R.string.contact_us))) {
-            System.out.println("thanhlv contact_us");
             Intent intent = new Intent(Intent.ACTION_SEND);
             intent.setType("message/rfc822");
             intent.putExtra(Intent.EXTRA_EMAIL, new String[]{AppConfigs.getInstance().getConfigModel().getFeedbackEmail()});
@@ -363,7 +350,6 @@
         }
 
         if (code.equals(getString(R.string.support_us_by_rating_our_app))) {
-            System.out.println("thanhlv support_us_by_rating_our_app");
 //            String url = "https://play.google.com/store/apps/developer?id=Zzic&hl=vi&gl=US";
 //            Intent i = new Intent(Intent.ACTION_VIEW);
 //            i.setData(Uri.parse(url));
@@ -387,12 +373,7 @@
     private Intent rateIntentForUrl(String url) {
         Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format("%s?id=%s", url, requireContext().getPackageName())));
         int flags = Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_ACTIVITY_MULTIPLE_TASK;
-        if (Build.VERSION.SDK_INT >= 21) {
-            flags |= Intent.FLAG_ACTIVITY_NEW_DOCUMENT;
-        } else {
-            //noinspection deprecation
-            flags |= Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET;
-        }
+        flags |= Intent.FLAG_ACTIVITY_NEW_DOCUMENT;
         intent.addFlags(flags);
         return intent;
     }
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>include ':ffmpeg4android_lib'\r\ninclude ':ATVizPro'\r\ninclude ':rtmppublisher'\r\ninclude ':rtplibrary'\r\ninclude ':encoder'\r\ninclude ':rtmp'\r\n//include ':rtsp'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
--- a/settings.gradle	(revision ededf05d19b8549b2772b172d4ea4ca532f549ee)
+++ b/settings.gradle	(date 1669261668723)
@@ -4,4 +4,3 @@
 include ':rtplibrary'
 include ':encoder'
 include ':rtmp'
-//include ':rtsp'
Index: ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/SubscriptionFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.atsoft.screenrecord.ui.fragments;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.ProgressDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\n\r\nimport com.android.billingclient.api.AcknowledgePurchaseParams;\r\nimport com.android.billingclient.api.BillingClient;\r\nimport com.android.billingclient.api.BillingClientStateListener;\r\nimport com.android.billingclient.api.BillingFlowParams;\r\nimport com.android.billingclient.api.BillingResult;\r\nimport com.android.billingclient.api.ProductDetails;\r\nimport com.android.billingclient.api.Purchase;\r\nimport com.android.billingclient.api.PurchaseHistoryRecord;\r\nimport com.android.billingclient.api.PurchasesUpdatedListener;\r\nimport com.android.billingclient.api.QueryProductDetailsParams;\r\nimport com.android.billingclient.api.QueryPurchaseHistoryParams;\r\nimport com.android.billingclient.api.QueryPurchasesParams;\r\nimport com.atsoft.screenrecord.AppConfigs;\r\nimport com.atsoft.screenrecord.Core;\r\nimport com.atsoft.screenrecord.R;\r\nimport com.atsoft.screenrecord.controllers.settings.SettingManager2;\r\nimport com.atsoft.screenrecord.model.Results;\r\nimport com.atsoft.screenrecord.model.SubscriptionsItemModel;\r\nimport com.atsoft.screenrecord.ui.utils.NetworkUtils;\r\nimport com.atsoft.screenrecord.utils.OnSingleClickListener;\r\nimport com.atsoft.screenrecord.utils.RetrofitClient;\r\nimport com.google.common.collect.ImmutableList;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.json.JSONException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class SubscriptionFragment extends Fragment {\r\n\r\n    private Activity mParentActivity = null;\r\n    private FragmentManager mFragmentManager;\r\n\r\n    public interface SubscriptionListener {\r\n        void onBuySuccess();\r\n    }\r\n\r\n    private SubscriptionListener mCallBack;\r\n\r\n    public SubscriptionFragment() {\r\n    }\r\n\r\n    public SubscriptionFragment(SubscriptionListener callBack) {\r\n        this.mCallBack = callBack;\r\n    }\r\n\r\n    String WEEKLY_ID, MONTHLY_ID, YEARLY_ID;\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n        mFragmentManager = getParentFragmentManager();\r\n\r\n        subs = new ArrayList<>(AppConfigs.getInstance().getSubsModel());\r\n        Collections.sort(subs, (t, t1) -> t.getSort() < t1.getSort() ? 1 : 0);\r\n\r\n        WEEKLY_ID = AppConfigs.getInstance().getSubsModel().get(0).getKeyID();\r\n        MONTHLY_ID = AppConfigs.getInstance().getSubsModel().get(1).getKeyID();\r\n        YEARLY_ID = AppConfigs.getInstance().getSubsModel().get(2).getKeyID();\r\n        System.out.println(\"thanhlv WEEKLY_ID = \"+ YEARLY_ID);\r\n    }\r\n\r\n    private View mViewRoot;\r\n\r\n    private final PurchasesUpdatedListener purchasesUpdatedListener = (billingResult, purchases) -> {\r\n        // To be implemented in a later section.\r\n        if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK\r\n                && purchases != null) {\r\n            for (Purchase purchase : purchases) {\r\n                handlePurchase(purchase);\r\n            }\r\n        } else if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.USER_CANCELED) {\r\n            // Handle an error caused by a user cancelling the purchase flow.\r\n            //TODO\r\n        } else {\r\n            //TODO\r\n        }\r\n\r\n    };\r\n\r\n    void handlePurchase(Purchase purchase) {\r\n//        if (mProgressDialog != null) mProgressDialog.dismiss();\r\n        if (!purchase.isAcknowledged()) {\r\n            billingClient.acknowledgePurchase(AcknowledgePurchaseParams\r\n                    .newBuilder()\r\n                    .setPurchaseToken(purchase.getPurchaseToken())\r\n                    .build(), billingResult -> {\r\n\r\n                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                    //Setting setIsRemoveAd to true\r\n                    if (purchase.getProducts().get(0).contains(subs.get(selected).getKeyID())) {\r\n                        SettingManager2.setProApp(requireContext(), true);\r\n                        System.out.println(\"thanhlv buy OK\");\r\n                        mCallBack.onBuySuccess();\r\n                        mFragmentManager.popBackStack();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    private void showProducts() {\r\n        ImmutableList<QueryProductDetailsParams.Product> productList = ImmutableList.of(\r\n                QueryProductDetailsParams.Product.newBuilder()\r\n                        .setProductId(WEEKLY_ID)\r\n                        .setProductType(BillingClient.ProductType.SUBS)\r\n                        .build(),\r\n                QueryProductDetailsParams.Product.newBuilder()\r\n                        .setProductId(MONTHLY_ID)\r\n                        .setProductType(BillingClient.ProductType.SUBS)\r\n                        .build(),\r\n                QueryProductDetailsParams.Product.newBuilder()\r\n                        .setProductId(YEARLY_ID)\r\n                        .setProductType(BillingClient.ProductType.SUBS)\r\n                        .build()\r\n        );\r\n\r\n        QueryProductDetailsParams params = QueryProductDetailsParams.newBuilder()\r\n                .setProductList(productList)\r\n                .build();\r\n\r\n        billingClient.queryProductDetailsAsync(\r\n                params,\r\n                (billingResult, prodDetailsList) -> {\r\n                    // Process the result\r\n\r\n                    Core.productDetails = new ArrayList<>(prodDetailsList);\r\n                    requireActivity().runOnUiThread(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            fillSubscription();\r\n                        }\r\n                    });\r\n                }\r\n        );\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    public void fillSubscription() {\r\n        for (int i = 0; i < 3; i++) {\r\n            for (ProductDetails product : Core.productDetails) {\r\n                String id = product.getProductId();\r\n                String price = \"\";\r\n                if (product.getSubscriptionOfferDetails() != null)\r\n                    price = getPrice(product.getSubscriptionOfferDetails().get(0).getPricingPhases().getPricingPhaseList());\r\n                if (id.equals(subs.get(i).getKeyID())) {\r\n                    if (i == 0) tvName1.setText(price + \"/ \" + subs.get(0).getName());\r\n                    if (i == 1) tvName2.setText(price + \"/ \" + subs.get(1).getName());\r\n                    if (i == 2) tvName3.setText(price + \"/ \" + subs.get(2).getName());\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private long maxPrice = -1;\r\n    private String formatPrice = \"\";\r\n    private String getPrice(List<ProductDetails.PricingPhase> pricingPhaseList) {\r\n        maxPrice = -1;\r\n        formatPrice = \"\";\r\n        for (ProductDetails.PricingPhase pricingPhase: pricingPhaseList) {\r\n            if (pricingPhase.getPriceAmountMicros() > maxPrice) {\r\n                maxPrice = pricingPhase.getPriceAmountMicros();\r\n                formatPrice = pricingPhase.getFormattedPrice();\r\n            }\r\n        }\r\n        return formatPrice;\r\n    }\r\n\r\n\r\n    private void connectGooglePlayBilling() {\r\n        billingClient.startConnection(new BillingClientStateListener() {\r\n            @Override\r\n            public void onBillingSetupFinished(@NonNull BillingResult billingResult) {\r\n                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                    // The BillingClient is ready. You can query purchases here.\r\n                    showProducts();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onBillingServiceDisconnected() {\r\n                // Try to restart the connection on the next request to\r\n                // Google Play by calling the startConnection() method.\r\n                connectGooglePlayBilling();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    @Override\r\n    public View onCreateView(@NotNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        mViewRoot = inflater.inflate(R.layout.subscriptions_layout, container, false);\r\n\r\n        billingClient = BillingClient.newBuilder(requireContext())\r\n                .setListener(purchasesUpdatedListener)\r\n                .enablePendingPurchases()\r\n                .build();\r\n        connectGooglePlayBilling();\r\n\r\n        return mViewRoot;\r\n    }\r\n\r\n    private void checkInternetConnect() {\r\n        if (!NetworkUtils.isConnected(requireContext())) {\r\n            new AlertDialog.Builder(requireContext())\r\n                    .setTitle(\"Internet unavailable.\")\r\n                    .setMessage(\"Please connect to network to purchase service.\")\r\n                    .setIcon(android.R.drawable.ic_dialog_alert)\r\n                    .setPositiveButton(android.R.string.yes, (dialog, which) -> {\r\n                    } )\r\n                    .setNegativeButton(android.R.string.no, (dialog, which) -> {} )\r\n                    .show();\r\n        }\r\n    }\r\n\r\n    ArrayList<SubscriptionsItemModel> subs;\r\n    int selected = 0;\r\n    TextView tvName1, tvName2, tvName3;\r\n    ImageView btnBuy;\r\n    LinearLayout lnHideSubs;\r\n\r\n    TextView tvRestore;\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        lnHideSubs = view.findViewById(R.id.hide_sub);\r\n        tvName1 = view.findViewById(R.id.name_sub_1);\r\n        TextView tvDes1 = view.findViewById(R.id.des_sub_1);\r\n        tvName2 = view.findViewById(R.id.name_sub_2);\r\n        TextView tvDes2 = view.findViewById(R.id.des_sub_2);\r\n        tvName3 = view.findViewById(R.id.name_sub_3);\r\n        TextView tvDes3 = view.findViewById(R.id.des_sub_3);\r\n\r\n        tvDes1.setText(subs.get(0).getDescription());\r\n        tvDes2.setText(subs.get(1).getDescription());\r\n        tvDes3.setText(subs.get(2).getDescription());\r\n\r\n        ImageView btn_check_1 = view.findViewById(R.id.img_check_sub_1);\r\n        ImageView btn_check_2 = view.findViewById(R.id.img_check_sub_2);\r\n        ImageView btn_check_3 = view.findViewById(R.id.img_check_sub_3);\r\n        LinearLayout ln_sub_1 = view.findViewById(R.id.check1);\r\n        LinearLayout ln_sub_2 = view.findViewById(R.id.check2);\r\n        LinearLayout ln_sub_3 = view.findViewById(R.id.check3);\r\n\r\n        ln_sub_1.setOnClickListener(view1 -> {\r\n            ln_sub_1.setBackgroundResource(R.drawable.shape_round_ss_checked);\r\n            btn_check_1.setBackgroundResource(R.drawable.ic_select_sub);\r\n            ln_sub_2.setBackgroundResource(R.drawable.shape_round_ss_check);\r\n            btn_check_2.setBackgroundResource(R.drawable.ic_non_select_sub);\r\n            ln_sub_3.setBackgroundResource(R.drawable.shape_round_ss_check);\r\n            btn_check_3.setBackgroundResource(R.drawable.ic_non_select_sub);\r\n            selected = 0;\r\n        });\r\n        ln_sub_2.setOnClickListener(view12 -> {\r\n            ln_sub_2.setBackgroundResource(R.drawable.shape_round_ss_checked);\r\n            btn_check_2.setBackgroundResource(R.drawable.ic_select_sub);\r\n            ln_sub_1.setBackgroundResource(R.drawable.shape_round_ss_check);\r\n            btn_check_1.setBackgroundResource(R.drawable.ic_non_select_sub);\r\n            ln_sub_3.setBackgroundResource(R.drawable.shape_round_ss_check);\r\n            btn_check_3.setBackgroundResource(R.drawable.ic_non_select_sub);\r\n            selected = 1;\r\n        });\r\n        ln_sub_3.setOnClickListener(view13 -> {\r\n            ln_sub_3.setBackgroundResource(R.drawable.shape_round_ss_checked);\r\n            btn_check_3.setBackgroundResource(R.drawable.ic_select_sub);\r\n            ln_sub_1.setBackgroundResource(R.drawable.shape_round_ss_check);\r\n            btn_check_1.setBackgroundResource(R.drawable.ic_non_select_sub);\r\n            ln_sub_2.setBackgroundResource(R.drawable.shape_round_ss_check);\r\n            btn_check_2.setBackgroundResource(R.drawable.ic_non_select_sub);\r\n            selected = 2;\r\n        });\r\n\r\n        btnBuy = view.findViewById(R.id.btn_start_plan);\r\n        btnBuy.setOnClickListener(new OnSingleClickListener() {\r\n            @Override\r\n            public void onSingleClick(View v) {\r\n                buildDialog();\r\n                btnBuy.setEnabled(false);\r\n                System.out.println(\"thanhlv setOnClickListener\");\r\n                launchPurchaseFlow(selected);\r\n            }\r\n        });\r\n\r\n\r\n        System.out.println(\"thanhlv billingClient \" +billingClient);\r\n\r\n        if (Core.productDetails.size() > 0) {\r\n            lnHideSubs.setVisibility(View.GONE);\r\n            btnBuy.setAlpha(1f);\r\n            btnBuy.setEnabled(true);\r\n            fillSubscription();\r\n        } else {\r\n            lnHideSubs.setVisibility(View.VISIBLE);\r\n            btnBuy.setAlpha(0.5f);\r\n            btnBuy.setEnabled(false);\r\n            showPopup(\"Something went wrong!\", \"Check your network connection and try again\");\r\n\r\n        }\r\n\r\n        ImageView btn_dismiss = view.findViewById(R.id.img_btn_back_header);\r\n        btn_dismiss.setOnClickListener(new OnSingleClickListener() {\r\n            @Override\r\n            public void onSingleClick(View v) {\r\n                mFragmentManager.popBackStack();\r\n            }\r\n        });\r\n\r\n\r\n        tvRestore = view.findViewById(R.id.tv_btn_restore);\r\n\r\n        tvRestore.setOnClickListener(new OnSingleClickListener() {\r\n            @Override\r\n            public void onSingleClick(View v) {\r\n                buildDialog();\r\n                tvRestore.setEnabled(false);\r\n                getPurchaseHistory();\r\n\r\n            }\r\n        });\r\n\r\n\r\n        TextView tvTermsOfService = view.findViewById(R.id.tv_terms_of_service);\r\n        TextView tvPrivacyNotice = view.findViewById(R.id.tv_privacy_notice);\r\n\r\n        tvTermsOfService.setOnClickListener(new OnSingleClickListener() {\r\n            @Override\r\n            public void onSingleClick(View v) {\r\n                String url = AppConfigs.getInstance().getConfigModel().getTermsURL();\r\n                Intent i = new Intent(Intent.ACTION_VIEW);\r\n                i.setData(Uri.parse(url));\r\n                startActivity(i);\r\n            }\r\n        });\r\n        tvPrivacyNotice.setOnClickListener(new OnSingleClickListener() {\r\n            @Override\r\n            public void onSingleClick(View v) {\r\n                String url = AppConfigs.getInstance().getConfigModel().getPrivacyPolicyURL();\r\n                Intent i = new Intent(Intent.ACTION_VIEW);\r\n                i.setData(Uri.parse(url));\r\n                startActivity(i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private ProgressDialog mProgressDialog;\r\n    private void buildDialog() {\r\n        if (mProgressDialog == null) {\r\n            mProgressDialog = ProgressDialog.show(getContext(), \"\", \"Connecting...\");\r\n        }\r\n    }\r\n\r\n\r\n    private BillingClient billingClient, billingClient2;\r\n    private ArrayList<ProductDetails> mProductDetailsList;\r\n    ProductDetails productDetail;\r\n    void launchPurchaseFlow(int sub) {\r\n        for (int i = 0; i < Core.productDetails.size(); i++) {\r\n            if (Core.productDetails.get(i).getProductId().equals(subs.get(sub).getKeyID())) {\r\n                productDetail = Core.productDetails.get(i);\r\n                break;\r\n            }\r\n        }\r\n        if (productDetail == null) return;\r\n        ImmutableList<BillingFlowParams.ProductDetailsParams> productDetailsParamsList =\r\n                ImmutableList.of(\r\n                        BillingFlowParams.ProductDetailsParams.newBuilder()\r\n                                .setProductDetails(productDetail)\r\n                                .setOfferToken(productDetail.getSubscriptionOfferDetails().get(0).getOfferToken())\r\n                                .build()\r\n                );\r\n        BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder()\r\n                .setProductDetailsParamsList(productDetailsParamsList)\r\n                .build();\r\n\r\n        if (mProgressDialog != null) mProgressDialog.dismiss();\r\n        if (billingClient != null) billingClient.launchBillingFlow(requireActivity(), billingFlowParams);\r\n        btnBuy.setEnabled(true);\r\n        System.out.println(\"thanhlv launchPurchaseFlow\");\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (billingClient != null)\r\n        billingClient.queryPurchasesAsync(\r\n                QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.SUBS).build(),\r\n                (billingResult, list) -> {\r\n                    if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                        for (Purchase purchase : list) {\r\n                            if (purchase.getPurchaseState() == Purchase.PurchaseState.PURCHASED && !purchase.isAcknowledged()) {\r\n                                handlePurchase(purchase);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n    }\r\n\r\n    public void setEnableButton() {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                tvRestore.setEnabled(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void getPurchaseHistory() {\r\n        setEnableButton();\r\n        billingClient.startConnection(new BillingClientStateListener() {\r\n            @Override\r\n            public void onBillingServiceDisconnected() {\r\n                if (mProgressDialog != null) mProgressDialog.dismiss();\r\n                requireActivity().runOnUiThread(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        tvRestore.setEnabled(true);\r\n                    }\r\n                });\r\n//                getPurchase();\r\n            }\r\n\r\n            @Override\r\n            public void onBillingSetupFinished(@NonNull BillingResult billingResult) {\r\n                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                    billingClient.queryPurchaseHistoryAsync(\r\n                            QueryPurchaseHistoryParams.newBuilder()\r\n                                    .setProductType(BillingClient.ProductType.SUBS)\r\n                                    .build(),\r\n                            (billingResult1, purchasesHistoryList) -> {\r\n                                if (mProgressDialog != null) mProgressDialog.dismiss();\r\n//                                System.out.println(\"thanhlv mPurchasesHistoryList  tvRestore.setEnabled(true);\" +purchasesHistoryList.size());\r\n                                setEnableButton();\r\n\r\n                                if (billingResult1.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                                    requireActivity().runOnUiThread(new Runnable() {\r\n                                        @Override\r\n                                        public void run() {\r\n                                            if (purchasesHistoryList != null) mPurchasesHistoryList = new ArrayList<>(purchasesHistoryList);\r\n                                        }\r\n                                    });\r\n                                    try {\r\n//                                        System.out.println(\"thanhlv mPurchasesHistoryList\" + mPurchasesHistoryList.size());\r\n                                        getPublicTime();\r\n                                    } catch (Exception e) {\r\n//                                        e.printStackTrace();\r\n                                        requireActivity().runOnUiThread(() -> checkPurchase(mPurchasesHistoryList, System.currentTimeMillis()));\r\n                                    }\r\n                                } else {\r\n                                    requireActivity().runOnUiThread(new Runnable() {\r\n                                        @Override\r\n                                        public void run() {\r\n                                            tvRestore.setEnabled(true);\r\n                                            showPopup(\"Something went wrong!\", \"Check your network connection and try again\");\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                    );\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void showPopup(String title, String des) {\r\n        new AlertDialog.Builder(requireContext())\r\n                .setTitle(title)\r\n                .setMessage(des)\r\n                .setPositiveButton(android.R.string.yes, (dialog, which) -> {\r\n                })\r\n                .show();\r\n    }\r\n    private ArrayList<PurchaseHistoryRecord> mPurchasesHistoryList;\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    private void checkPurchase(List<PurchaseHistoryRecord> purchasesHistoryList, long currentTime) {\r\n\r\n        if (purchasesHistoryList == null || purchasesHistoryList.size() == 0) {\r\n            SettingManager2.setProApp(requireContext(), false);\r\n            showPopup(\"Something went wrong!\", \"This item maybe purchased by a different account. Please change account and try again\");\r\n            return;\r\n        }\r\n\r\n        boolean hasId = false;\r\n        for (PurchaseHistoryRecord item : mPurchasesHistoryList) {\r\n            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(0).getKeyID()) ) {\r\n                hasId = true;\r\n                if ((currentTime - item.getPurchaseTime())/1000 > 7 * 24 * 60 * 60) {\r\n                    // qua han\r\n                    SettingManager2.setProApp(requireContext(), false);\r\n                    showPopup(\"Restore Failed!\", \"Your subscription has expired, please upgrade to proversion!\");\r\n                } else {\r\n                    SettingManager2.setProApp(requireContext(), true);\r\n                    showPopup( \"Restore Successfully!\", \"You've successfully restored your purchase!\");\r\n                    return;\r\n                }\r\n            }\r\n            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(1).getKeyID()) ) {\r\n                hasId = true;\r\n                if ((currentTime - item.getPurchaseTime())/1000 > 2592000) {\r\n                    // qua han\r\n                    SettingManager2.setProApp(requireContext(), false);\r\n                    showPopup(\"Restore Failed!\", \"Your subscription has expired, please upgrade to proversion!\");\r\n                } else {\r\n                    SettingManager2.setProApp(requireContext(), true);\r\n                    showPopup( \"Restore Successfully!\", \"You've successfully restored your purchase!\");\r\n                    return;\r\n                }\r\n            }\r\n            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(2).getKeyID()) ) {\r\n                hasId = true;\r\n                if ((currentTime - item.getPurchaseTime())/1000 > 365 * 24 * 60 * 60) {\r\n                    // qua han\r\n                    SettingManager2.setProApp(requireContext(), false);\r\n                    showPopup(\"Restore Failed!\", \"Your subscription has expired, please upgrade to proversion!\");\r\n                } else {\r\n                    SettingManager2.setProApp(requireContext(), true);\r\n                    showPopup( \"Restore Successfully!\", \"You've successfully restored your purchase!\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        if (!hasId) {\r\n            SettingManager2.setProApp(requireContext(), false);\r\n            showPopup(\"Something went wrong!\", \"This item maybe purchased by a different account. Please change account and try again\");\r\n        }\r\n    }\r\n    public void getPublicTime() throws JSONException {\r\n        String tz = TimeZone.getDefault().getID();\r\n        Call<Results> call = RetrofitClient.getInstance().getMyApi().getTimeZone(tz);\r\n        call.enqueue(new Callback<Results>() {\r\n            @Override\r\n            public void onResponse(Call<Results> call, Response<Results> response) {\r\n\r\n                if (response.body() == null) {\r\n                    checkPurchase(mPurchasesHistoryList, System.currentTimeMillis());\r\n                } else\r\n                    checkPurchase(mPurchasesHistoryList, ((Results) response.body()).getDateTimeMs());\r\n            }\r\n            @Override\r\n            public void onFailure(Call<Results> call, Throwable t) {\r\n                checkPurchase(mPurchasesHistoryList, System.currentTimeMillis());\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/SubscriptionFragment.java b/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/SubscriptionFragment.java
--- a/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/SubscriptionFragment.java	(revision ededf05d19b8549b2772b172d4ea4ca532f549ee)
+++ b/ATVizPro/src/main/java/com/atsoft/screenrecord/ui/fragments/SubscriptionFragment.java	(date 1669261452291)
@@ -1,7 +1,6 @@
 package com.atsoft.screenrecord.ui.fragments;
 
 import android.annotation.SuppressLint;
-import android.app.Activity;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.Intent;
@@ -34,6 +33,7 @@
 import com.android.billingclient.api.QueryProductDetailsParams;
 import com.android.billingclient.api.QueryPurchaseHistoryParams;
 import com.android.billingclient.api.QueryPurchasesParams;
+import com.atsoft.screenrecord.App;
 import com.atsoft.screenrecord.AppConfigs;
 import com.atsoft.screenrecord.Core;
 import com.atsoft.screenrecord.R;
@@ -46,11 +46,9 @@
 import com.google.common.collect.ImmutableList;
 
 import org.jetbrains.annotations.NotNull;
-import org.json.JSONException;
 
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.List;
 import java.util.TimeZone;
 
@@ -60,7 +58,6 @@
 
 public class SubscriptionFragment extends Fragment {
 
-    private Activity mParentActivity = null;
     private FragmentManager mFragmentManager;
 
     public interface SubscriptionListener {
@@ -77,6 +74,7 @@
     }
 
     String WEEKLY_ID, MONTHLY_ID, YEARLY_ID;
+
     @RequiresApi(api = Build.VERSION_CODES.N)
     @Override
     public void onAttach(@NonNull Context context) {
@@ -89,10 +87,7 @@
         WEEKLY_ID = AppConfigs.getInstance().getSubsModel().get(0).getKeyID();
         MONTHLY_ID = AppConfigs.getInstance().getSubsModel().get(1).getKeyID();
         YEARLY_ID = AppConfigs.getInstance().getSubsModel().get(2).getKeyID();
-        System.out.println("thanhlv WEEKLY_ID = "+ YEARLY_ID);
     }
-
-    private View mViewRoot;
 
     private final PurchasesUpdatedListener purchasesUpdatedListener = (billingResult, purchases) -> {
         // To be implemented in a later section.
@@ -122,7 +117,6 @@
                     //Setting setIsRemoveAd to true
                     if (purchase.getProducts().get(0).contains(subs.get(selected).getKeyID())) {
                         SettingManager2.setProApp(requireContext(), true);
-                        System.out.println("thanhlv buy OK");
                         mCallBack.onBuySuccess();
                         mFragmentManager.popBackStack();
                     }
@@ -158,12 +152,7 @@
                     // Process the result
 
                     Core.productDetails = new ArrayList<>(prodDetailsList);
-                    requireActivity().runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            fillSubscription();
-                        }
-                    });
+                    requireActivity().runOnUiThread(this::fillSubscription);
                 }
         );
     }
@@ -188,10 +177,11 @@
 
     private long maxPrice = -1;
     private String formatPrice = "";
+
     private String getPrice(List<ProductDetails.PricingPhase> pricingPhaseList) {
         maxPrice = -1;
         formatPrice = "";
-        for (ProductDetails.PricingPhase pricingPhase: pricingPhaseList) {
+        for (ProductDetails.PricingPhase pricingPhase : pricingPhaseList) {
             if (pricingPhase.getPriceAmountMicros() > maxPrice) {
                 maxPrice = pricingPhase.getPriceAmountMicros();
                 formatPrice = pricingPhase.getFormattedPrice();
@@ -224,7 +214,7 @@
     @RequiresApi(api = Build.VERSION_CODES.N)
     @Override
     public View onCreateView(@NotNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        mViewRoot = inflater.inflate(R.layout.subscriptions_layout, container, false);
+        View mViewRoot = inflater.inflate(R.layout.subscriptions_layout, container, false);
 
         billingClient = BillingClient.newBuilder(requireContext())
                 .setListener(purchasesUpdatedListener)
@@ -242,8 +232,9 @@
                     .setMessage("Please connect to network to purchase service.")
                     .setIcon(android.R.drawable.ic_dialog_alert)
                     .setPositiveButton(android.R.string.yes, (dialog, which) -> {
-                    } )
-                    .setNegativeButton(android.R.string.no, (dialog, which) -> {} )
+                    })
+                    .setNegativeButton(android.R.string.no, (dialog, which) -> {
+                    })
                     .show();
         }
     }
@@ -314,14 +305,10 @@
             public void onSingleClick(View v) {
                 buildDialog();
                 btnBuy.setEnabled(false);
-                System.out.println("thanhlv setOnClickListener");
                 launchPurchaseFlow(selected);
             }
         });
 
-
-        System.out.println("thanhlv billingClient " +billingClient);
-
         if (Core.productDetails.size() > 0) {
             lnHideSubs.setVisibility(View.GONE);
             btnBuy.setAlpha(1f);
@@ -381,6 +368,7 @@
     }
 
     private ProgressDialog mProgressDialog;
+
     private void buildDialog() {
         if (mProgressDialog == null) {
             mProgressDialog = ProgressDialog.show(getContext(), "", "Connecting...");
@@ -388,9 +376,9 @@
     }
 
 
-    private BillingClient billingClient, billingClient2;
-    private ArrayList<ProductDetails> mProductDetailsList;
+    private BillingClient billingClient;
     ProductDetails productDetail;
+
     void launchPurchaseFlow(int sub) {
         for (int i = 0; i < Core.productDetails.size(); i++) {
             if (Core.productDetails.get(i).getProductId().equals(subs.get(sub).getKeyID())) {
@@ -411,10 +399,9 @@
                 .build();
 
         if (mProgressDialog != null) mProgressDialog.dismiss();
-        if (billingClient != null) billingClient.launchBillingFlow(requireActivity(), billingFlowParams);
+        if (billingClient != null)
+            billingClient.launchBillingFlow(requireActivity(), billingFlowParams);
         btnBuy.setEnabled(true);
-        System.out.println("thanhlv launchPurchaseFlow");
-
     }
 
     @Override
@@ -427,28 +414,23 @@
         super.onResume();
 
         if (billingClient != null)
-        billingClient.queryPurchasesAsync(
-                QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.SUBS).build(),
-                (billingResult, list) -> {
-                    if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {
-                        for (Purchase purchase : list) {
-                            if (purchase.getPurchaseState() == Purchase.PurchaseState.PURCHASED && !purchase.isAcknowledged()) {
-                                handlePurchase(purchase);
-                            }
-                        }
-                    }
-                }
-        );
+            billingClient.queryPurchasesAsync(
+                    QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.SUBS).build(),
+                    (billingResult, list) -> {
+                        if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {
+                            for (Purchase purchase : list) {
+                                if (purchase.getPurchaseState() == Purchase.PurchaseState.PURCHASED && !purchase.isAcknowledged()) {
+                                    handlePurchase(purchase);
+                                }
+                            }
+                        }
+                    }
+            );
 
     }
 
     public void setEnableButton() {
-        requireActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                tvRestore.setEnabled(true);
-            }
-        });
+        requireActivity().runOnUiThread(() -> tvRestore.setEnabled(true));
     }
 
     private void getPurchaseHistory() {
@@ -457,13 +439,7 @@
             @Override
             public void onBillingServiceDisconnected() {
                 if (mProgressDialog != null) mProgressDialog.dismiss();
-                requireActivity().runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        tvRestore.setEnabled(true);
-                    }
-                });
-//                getPurchase();
+                requireActivity().runOnUiThread(() -> tvRestore.setEnabled(true));
             }
 
             @Override
@@ -475,30 +451,21 @@
                                     .build(),
                             (billingResult1, purchasesHistoryList) -> {
                                 if (mProgressDialog != null) mProgressDialog.dismiss();
-//                                System.out.println("thanhlv mPurchasesHistoryList  tvRestore.setEnabled(true);" +purchasesHistoryList.size());
                                 setEnableButton();
-
                                 if (billingResult1.getResponseCode() == BillingClient.BillingResponseCode.OK) {
-                                    requireActivity().runOnUiThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            if (purchasesHistoryList != null) mPurchasesHistoryList = new ArrayList<>(purchasesHistoryList);
-                                        }
+                                    requireActivity().runOnUiThread(() -> {
+                                        if (purchasesHistoryList != null)
+                                            mPurchasesHistoryList = new ArrayList<>(purchasesHistoryList);
                                     });
                                     try {
-//                                        System.out.println("thanhlv mPurchasesHistoryList" + mPurchasesHistoryList.size());
                                         getPublicTime();
                                     } catch (Exception e) {
-//                                        e.printStackTrace();
                                         requireActivity().runOnUiThread(() -> checkPurchase(mPurchasesHistoryList, System.currentTimeMillis()));
                                     }
                                 } else {
-                                    requireActivity().runOnUiThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            tvRestore.setEnabled(true);
-                                            showPopup("Something went wrong!", "Check your network connection and try again");
-                                        }
+                                    requireActivity().runOnUiThread(() -> {
+                                        tvRestore.setEnabled(true);
+                                        showPopup("Something went wrong!", "Check your network connection and try again");
                                     });
                                 }
                             }
@@ -507,7 +474,9 @@
             }
         });
     }
+
     private void showPopup(String title, String des) {
+        if (getContext() == null) return;
         new AlertDialog.Builder(requireContext())
                 .setTitle(title)
                 .setMessage(des)
@@ -515,74 +484,78 @@
                 })
                 .show();
     }
+
     private ArrayList<PurchaseHistoryRecord> mPurchasesHistoryList;
+
     @SuppressLint("NotifyDataSetChanged")
     private void checkPurchase(List<PurchaseHistoryRecord> purchasesHistoryList, long currentTime) {
 
         if (purchasesHistoryList == null || purchasesHistoryList.size() == 0) {
-            SettingManager2.setProApp(requireContext(), false);
+            SettingManager2.setProApp(App.getAppContext(), false);
             showPopup("Something went wrong!", "This item maybe purchased by a different account. Please change account and try again");
             return;
         }
 
         boolean hasId = false;
         for (PurchaseHistoryRecord item : mPurchasesHistoryList) {
-            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(0).getKeyID()) ) {
+            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(0).getKeyID())) {
                 hasId = true;
-                if ((currentTime - item.getPurchaseTime())/1000 > 7 * 24 * 60 * 60) {
+                if ((currentTime - item.getPurchaseTime()) / 1000 > 7 * 24 * 60 * 60) {
                     // qua han
-                    SettingManager2.setProApp(requireContext(), false);
+                    SettingManager2.setProApp(App.getAppContext(), false);
                     showPopup("Restore Failed!", "Your subscription has expired, please upgrade to proversion!");
                 } else {
-                    SettingManager2.setProApp(requireContext(), true);
-                    showPopup( "Restore Successfully!", "You've successfully restored your purchase!");
+                    SettingManager2.setProApp(App.getAppContext(), true);
+                    showPopup("Restore Successfully!", "You've successfully restored your purchase!");
                     return;
                 }
             }
-            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(1).getKeyID()) ) {
+            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(1).getKeyID())) {
                 hasId = true;
-                if ((currentTime - item.getPurchaseTime())/1000 > 2592000) {
+                if ((currentTime - item.getPurchaseTime()) / 1000 > 30 * 24 * 60 * 60) {
                     // qua han
-                    SettingManager2.setProApp(requireContext(), false);
+                    SettingManager2.setProApp(App.getAppContext(), false);
                     showPopup("Restore Failed!", "Your subscription has expired, please upgrade to proversion!");
                 } else {
-                    SettingManager2.setProApp(requireContext(), true);
-                    showPopup( "Restore Successfully!", "You've successfully restored your purchase!");
+                    SettingManager2.setProApp(App.getAppContext(), true);
+                    showPopup("Restore Successfully!", "You've successfully restored your purchase!");
                     return;
                 }
             }
-            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(2).getKeyID()) ) {
+            if (item.getProducts().get(0).contains(AppConfigs.getInstance().getSubsModel().get(2).getKeyID())) {
                 hasId = true;
-                if ((currentTime - item.getPurchaseTime())/1000 > 365 * 24 * 60 * 60) {
+                if ((currentTime - item.getPurchaseTime()) / 1000 > 365 * 24 * 60 * 60) {
                     // qua han
-                    SettingManager2.setProApp(requireContext(), false);
+                    SettingManager2.setProApp(App.getAppContext(), false);
                     showPopup("Restore Failed!", "Your subscription has expired, please upgrade to proversion!");
                 } else {
-                    SettingManager2.setProApp(requireContext(), true);
-                    showPopup( "Restore Successfully!", "You've successfully restored your purchase!");
+                    SettingManager2.setProApp(App.getAppContext(), true);
+                    showPopup("Restore Successfully!", "You've successfully restored your purchase!");
                     return;
                 }
             }
         }
         if (!hasId) {
-            SettingManager2.setProApp(requireContext(), false);
+            SettingManager2.setProApp(App.getAppContext(), false);
             showPopup("Something went wrong!", "This item maybe purchased by a different account. Please change account and try again");
         }
     }
-    public void getPublicTime() throws JSONException {
+
+    public void getPublicTime() {
         String tz = TimeZone.getDefault().getID();
         Call<Results> call = RetrofitClient.getInstance().getMyApi().getTimeZone(tz);
         call.enqueue(new Callback<Results>() {
             @Override
-            public void onResponse(Call<Results> call, Response<Results> response) {
+            public void onResponse(@NonNull Call<Results> call, @NonNull Response<Results> response) {
 
                 if (response.body() == null) {
                     checkPurchase(mPurchasesHistoryList, System.currentTimeMillis());
                 } else
                     checkPurchase(mPurchasesHistoryList, ((Results) response.body()).getDateTimeMs());
             }
+
             @Override
-            public void onFailure(Call<Results> call, Throwable t) {
+            public void onFailure(@NonNull Call<Results> call, @NonNull Throwable t) {
                 checkPurchase(mPurchasesHistoryList, System.currentTimeMillis());
             }
         });

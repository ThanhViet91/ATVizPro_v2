Index: ATVizPro/src/main/java/com/examples/atscreenrecord/ui/activities/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.examples.atscreenrecord.ui.activities;\r\n\r\nimport static com.examples.atscreenrecord.ui.activities.CompressBeforeReactCamActivity.VIDEO_PATH_KEY;\r\nimport static com.examples.atscreenrecord.ui.fragments.DialogSelectVideoSource.ARG_PARAM1;\r\nimport static com.examples.atscreenrecord.ui.utils.MyUtils.hideStatusBar;\r\nimport static com.examples.atscreenrecord.ui.utils.MyUtils.isMyServiceRunning;\r\n\r\nimport android.Manifest;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.media.projection.MediaProjectionManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.provider.Settings;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.android.billingclient.api.AcknowledgePurchaseParams;\r\nimport com.android.billingclient.api.AcknowledgePurchaseResponseListener;\r\nimport com.android.billingclient.api.BillingClient;\r\nimport com.android.billingclient.api.BillingClientStateListener;\r\nimport com.android.billingclient.api.BillingFlowParams;\r\nimport com.android.billingclient.api.BillingResult;\r\nimport com.android.billingclient.api.ConsumeParams;\r\nimport com.android.billingclient.api.ConsumeResponseListener;\r\nimport com.android.billingclient.api.ProductDetails;\r\nimport com.android.billingclient.api.ProductDetailsResponseListener;\r\nimport com.android.billingclient.api.Purchase;\r\nimport com.android.billingclient.api.PurchaseHistoryResponseListener;\r\nimport com.android.billingclient.api.PurchasesUpdatedListener;\r\nimport com.android.billingclient.api.QueryProductDetailsParams;\r\nimport com.android.billingclient.api.QueryPurchaseHistoryParams;\r\nimport com.android.billingclient.api.QueryPurchasesParams;\r\nimport com.examples.atscreenrecord.App;\r\nimport com.examples.atscreenrecord.AppOpenManager;\r\nimport com.examples.atscreenrecord.Core;\r\nimport com.examples.atscreenrecord.R;\r\nimport com.examples.atscreenrecord.controllers.settings.SettingManager2;\r\nimport com.examples.atscreenrecord.ui.fragments.DialogBitrate;\r\nimport com.examples.atscreenrecord.ui.fragments.DialogFragmentBase;\r\nimport com.examples.atscreenrecord.ui.fragments.DialogFrameRate;\r\nimport com.examples.atscreenrecord.ui.fragments.DialogSelectVideoSource;\r\nimport com.examples.atscreenrecord.ui.fragments.DialogVideoResolution;\r\nimport com.examples.atscreenrecord.ui.fragments.FragmentFAQ;\r\nimport com.examples.atscreenrecord.ui.fragments.FragmentSettings;\r\nimport com.examples.atscreenrecord.ui.fragments.GuidelineLiveStreamFragment;\r\nimport com.examples.atscreenrecord.ui.fragments.GuidelineScreenRecordFragment;\r\nimport com.examples.atscreenrecord.ui.fragments.LiveStreamingFragment;\r\nimport com.examples.atscreenrecord.ui.services.ControllerService;\r\nimport com.examples.atscreenrecord.ui.services.ExecuteService;\r\nimport com.examples.atscreenrecord.ui.services.streaming.StreamingService;\r\nimport com.examples.atscreenrecord.ui.utils.MyUtils;\r\nimport com.examples.atscreenrecord.utils.AdUtil;\r\nimport com.examples.atscreenrecord.utils.PathUtil;\r\nimport com.google.android.gms.ads.AdError;\r\nimport com.google.android.gms.ads.AdRequest;\r\nimport com.google.android.gms.ads.AdView;\r\nimport com.google.android.gms.ads.FullScreenContentCallback;\r\nimport com.google.android.gms.ads.LoadAdError;\r\nimport com.google.android.gms.ads.interstitial.InterstitialAd;\r\nimport com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.common.collect.ImmutableList;\r\nimport com.takusemba.rtmppublisher.helper.StreamProfile;\r\n\r\nimport java.net.URISyntaxException;\r\nimport java.util.List;\r\n\r\nimport pl.bclogic.pulsator4droid.library.PulsatorLayout;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n    private static final String TAG = MainActivity.class.getSimpleName();\r\n    public static final int REQUEST_VIDEO_FOR_REACT_CAM = 1102;\r\n    public static final int REQUEST_VIDEO_FOR_COMMENTARY = 1105;\r\n    public static final int REQUEST_VIDEO_FOR_VIDEO_EDIT = 1107;\r\n    public static final int REQUEST_SHOW_FAQ = 102;\r\n    public static final int REQUEST_SHOW_PROJECTS_DEFAULT = 105;\r\n    private static final String THE_FIRST_TIME_SCREEN_RECORD = \"action_first_record\";\r\n    private static final String THE_FIRST_TIME_LIVESTREAM = \"action_first_livestream\";\r\n    public static boolean active = false;\r\n    private static final boolean DEBUG = MyUtils.DEBUG;\r\n    private static final int PERMISSION_REQUEST_CODE = 3004;\r\n    private static final int PERMISSION_DRAW_OVER_WINDOW = 3005;\r\n    private static final int PERMISSION_RECORD_DISPLAY = 3006;\r\n\r\n    public static final String KEY_PATH_VIDEO = \"key_video_selected_path\";\r\n\r\n    public void showProductRemoveAds() {\r\n        handlerProductList(mProductDetailsList);\r\n    }\r\n\r\n    private static String[] mPermission = new String[]{\r\n            Manifest.permission.CAMERA,\r\n            Manifest.permission.RECORD_AUDIO,\r\n            Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n            Manifest.permission.READ_EXTERNAL_STORAGE\r\n    };\r\n    public int mMode = MyUtils.MODE_RECORDING;\r\n\r\n    private Intent mScreenCaptureIntent = null;\r\n\r\n    private int mScreenCaptureResultCode = MyUtils.RESULT_CODE_FAILED;\r\n\r\n    private StreamProfile mStreamProfile;\r\n\r\n    @Override\r\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\r\n        super.onSaveInstanceState(outState);\r\n        outState.putInt(MyUtils.KEY_CONTROLlER_MODE, mMode);\r\n    }\r\n\r\n    @Override\r\n    protected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n        super.onRestoreInstanceState(savedInstanceState);\r\n        if (savedInstanceState != null) {\r\n            mMode = savedInstanceState.getInt(MyUtils.KEY_CONTROLlER_MODE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        active = true;\r\n    }\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        active = false;\r\n    }\r\n\r\n    void handlePurchase(Purchase purchase) {\r\n        // Purchase retrieved from BillingClient#queryPurchasesAsync or your PurchasesUpdatedListener.\r\n        // Verify the purchase.\r\n        // Ensure entitlement was not already granted for this purchaseToken.\r\n        // Grant entitlement to the user.\r\n        if (purchase.getPurchaseState() == Purchase.PurchaseState.PURCHASED) {\r\n            if (!purchase.isAcknowledged()) {\r\n                AcknowledgePurchaseParams acknowledgePurchaseParams =\r\n                        AcknowledgePurchaseParams.newBuilder()\r\n                                .setPurchaseToken(purchase.getPurchaseToken())\r\n                                .build();\r\n                billingClient.acknowledgePurchase(acknowledgePurchaseParams, new AcknowledgePurchaseResponseListener() {\r\n                    @Override\r\n                    public void onAcknowledgePurchaseResponse(@NonNull BillingResult billingResult) {\r\n                        if (billingResult.getResponseCode() == 0) {\r\n                            if (purchase.getProducts().get(0).contains(getString(R.string.product_id_remove_ads))) {\r\n                                SettingManager2.setRemoveAds(getApplicationContext(), true);\r\n                                initialAds = false;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private PurchasesUpdatedListener purchasesUpdatedListener = new PurchasesUpdatedListener() {\r\n        @Override\r\n        public void onPurchasesUpdated(BillingResult billingResult, List<Purchase> purchases) {\r\n            // To be implemented in a later section.\r\n\r\n            if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK\r\n                    && purchases != null) {\r\n                for (Purchase purchase : purchases) {\r\n                    handlePurchase(purchase);\r\n                }\r\n            } else if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.USER_CANCELED) {\r\n                // Handle an error caused by a user cancelling the purchase flow.\r\n            } else {\r\n                // Handle any other error codes.\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    private BillingClient billingClient;\r\n\r\n    private AdView mAdView;\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        pulsator.stop();\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        hideStatusBar(this);\r\n\r\n        billingClient = BillingClient.newBuilder(this)\r\n                .setListener(purchasesUpdatedListener)\r\n                .enablePendingPurchases()\r\n                .build();\r\n\r\n//        SettingManager2.setRemoveAds(this, false);\r\n        initViews();\r\n\r\n        System.out.println(\"thanhlv desity =============== \" + App.getAppContext().getResources().getDisplayMetrics().scaledDensity);\r\n        connectGooglePlayBilling();\r\n\r\n        if (!hasPermission()) requestPermissions();\r\n\r\n        Intent intent = getIntent();\r\n        if (intent != null)\r\n            handleIncomingRequest(intent);\r\n\r\n//        File tesst = new File(MyUtils.getBaseStorageDirectory2(), MyUtils.createFileName(\".mp4\"));\r\n\r\n    }\r\n\r\n    private void connectGooglePlayBilling() {\r\n        billingClient.startConnection(new BillingClientStateListener() {\r\n            @Override\r\n            public void onBillingSetupFinished(BillingResult billingResult) {\r\n                if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                    // The BillingClient is ready. You can query purchases here.\r\n                    showProducts();\r\n                    getPurchaseHistory();\r\n                } else {\r\n                    //check show ad banner when connectGGBill fail\r\n                    if (!SettingManager2.getRemoveAds(getApplicationContext())) {\r\n                        runOnUiThread(new Runnable() {\r\n                            @Override\r\n                            public void run() {\r\n                                System.out.println(\"thanhlv createBannerAdmob connectGooglePlayBilling \");\r\n                                AdUtil.createBannerAdmob(getApplicationContext(), mAdView);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onBillingServiceDisconnected() {\r\n                // Try to restart the connection on the next request to\r\n                // Google Play by calling the startConnection() method.\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private List<ProductDetails> mProductDetailsList;\r\n\r\n    private void showProducts() {\r\n        QueryProductDetailsParams queryProductDetailsParams =\r\n                QueryProductDetailsParams.newBuilder()\r\n                        .setProductList(\r\n                                ImmutableList.of(QueryProductDetailsParams.Product.newBuilder()\r\n                                        .setProductId(getString(R.string.product_id_remove_ads))\r\n                                        .setProductType(BillingClient.ProductType.INAPP)\r\n                                        .build()\r\n                                )\r\n                        ).build();\r\n\r\n        billingClient.queryProductDetailsAsync(\r\n                queryProductDetailsParams,\r\n                new ProductDetailsResponseListener() {\r\n                    public void onProductDetailsResponse(BillingResult billingResult,\r\n                                                         List<ProductDetails> productDetailsList) {\r\n                        // check billingResult\r\n                        // process returned productDetailsList\r\n                        mProductDetailsList = productDetailsList;\r\n                    }\r\n                }\r\n        );\r\n\r\n\r\n    }\r\n\r\n    private void handlerProductList(List<ProductDetails> productDetailsList) {\r\n        if (productDetailsList == null || productDetailsList.size() == 0) return;\r\n        ImmutableList productDetailsParamsList =\r\n                ImmutableList.of(\r\n                        BillingFlowParams.ProductDetailsParams.newBuilder()\r\n                                // retrieve a value for \"productDetails\" by calling queryProductDetailsAsync()\r\n                                .setProductDetails(productDetailsList.get(0))\r\n                                // to get an offer token, call ProductDetails.getSubscriptionOfferDetails()\r\n                                // for a list of offers that are available to the user\r\n//                                                .setOfferToken(productDetailsList.get(0).getSubscriptionOfferDetails().get(0).getOfferToken())\r\n                                .build()\r\n                );\r\n\r\n        BillingFlowParams billingFlowParams = BillingFlowParams.newBuilder()\r\n                .setProductDetailsParamsList(productDetailsParamsList)\r\n                .build();\r\n\r\n        // Launch the billing flow\r\n        BillingResult billingResult = billingClient.launchBillingFlow(this, billingFlowParams);\r\n    }\r\n\r\n    public void getPurchaseHistory() {\r\n        billingClient.queryPurchaseHistoryAsync(\r\n                QueryPurchaseHistoryParams.newBuilder()\r\n                        .setProductType(BillingClient.ProductType.INAPP)\r\n                        .build(),\r\n                new PurchaseHistoryResponseListener() {\r\n                    public void onPurchaseHistoryResponse(\r\n                            BillingResult billingResult, List purchasesHistoryList) {\r\n                        // check billingResult\r\n                        // process returned purchase history list, e.g. display purchase history\r\n\r\n                        for (Object purchase : purchasesHistoryList) {\r\n                            if (purchase.toString().contains(getString(R.string.product_id_remove_ads))) {\r\n                                SettingManager2.setRemoveAds(getApplicationContext(), true);\r\n                                initialAds = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!SettingManager2.getRemoveAds(getApplicationContext())) {\r\n\r\n                            runOnUiThread(new Runnable() {\r\n                                @Override\r\n                                public void run() {\r\n                                    System.out.println(\"thanhlv createBannerAdmob getPurchaseHistory \");\r\n                                    AdUtil.createBannerAdmob(getApplicationContext(), mAdView);\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n    }\r\n\r\n    void confirmPurchase(Purchase purchase) {\r\n        if (purchase.getProducts().get(0).equals(getString(R.string.product_id_remove_ads)))\r\n            SettingManager2.setRemoveAds(this, true);\r\n    }\r\n\r\n    void verifyPurchase(Purchase purchase) {\r\n        ConsumeParams consumeParams = ConsumeParams.newBuilder()\r\n                .setPurchaseToken(purchase.getPurchaseToken())\r\n                .build();\r\n        ConsumeResponseListener listener = (billingResult, s) -> {\r\n            if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                confirmPurchase(purchase);\r\n            }\r\n        };\r\n        billingClient.consumeAsync(consumeParams, listener);\r\n    }\r\n\r\n    public static boolean initialAds = false;\r\n    protected void onResume() {\r\n        super.onResume();\r\n        pulsator.start();\r\n        billingClient.queryPurchasesAsync(\r\n                QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.INAPP).build(),\r\n                (billingResult, list) -> {\r\n                    if (billingResult.getResponseCode() == BillingClient.BillingResponseCode.OK) {\r\n                        for (Purchase purchase : list) {\r\n                            if (purchase.getPurchaseState() == Purchase.PurchaseState.PURCHASED && !purchase.isAcknowledged()) {\r\n                                verifyPurchase(purchase);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n        checkShowAd();\r\n    }\r\n\r\n    public void checkShowAd() {\r\n        if (initialAds) {\r\n            AdUtil.createBannerAdmob(getApplicationContext(), mAdView);\r\n            createInterstitialAdmob();\r\n        }\r\n    }\r\n\r\n    private void handleIncomingRequest(Intent intent) {\r\n        if (intent.getAction() != null) {\r\n            System.out.println(\"thanhlv Main intent === action : \" + intent.getAction());\r\n            switch (intent.getAction()) {\r\n                case MyUtils.ACTION_START_CAPTURE_NOW:\r\n                    mImgRec.performClick();\r\n                    break;\r\n\r\n                case \"from_notification\":\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void requestScreenCaptureIntent() {\r\n        if (mScreenCaptureIntent == null) {\r\n            MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) getSystemService(Context.MEDIA_PROJECTION_SERVICE);\r\n            startActivityForResult(mediaProjectionManager.createScreenCaptureIntent(), PERMISSION_RECORD_DISPLAY);\r\n        }\r\n    }\r\n\r\n    private ImageView mImgRec;\r\n    PulsatorLayout pulsator;\r\n    private void initViews() {\r\n        mAdView = findViewById(R.id.adView);\r\n\r\n        // initialise pulsator layout\r\n        pulsator = (PulsatorLayout) findViewById(R.id.pulsator);\r\n        pulsator.start();\r\n\r\n        //initData()\r\n        generateVideoSettings();\r\n        updateVideoSettings();\r\n\r\n        //\r\n        mImgRec = findViewById(R.id.img_record);\r\n        ImageView btn_setting = findViewById(R.id.img_settings);\r\n        LinearLayout btn_set_resolution = findViewById(R.id.set_video_resolution);\r\n        LinearLayout bnt_set_bitrate = findViewById(R.id.set_bitrate);\r\n        LinearLayout btn_set_fps = findViewById(R.id.set_frame_rate);\r\n\r\n        btn_setting.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                getSupportFragmentManager()\r\n                        .beginTransaction()\r\n                        .add(R.id.frame_layout_fragment, new FragmentSettings(), \"\")\r\n                        .addToBackStack(\"\")\r\n                        .commit();\r\n\r\n            }\r\n        });\r\n\r\n        btn_set_resolution.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                new DialogVideoResolution(new DialogFragmentBase.IVideoSettingListener() {\r\n                    @Override\r\n                    public void onClick() {\r\n                        updateVideoSettings();\r\n                    }\r\n                }).show(getSupportFragmentManager(), \"\");\r\n            }\r\n        });\r\n\r\n        bnt_set_bitrate.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                new DialogBitrate(new DialogFragmentBase.IVideoSettingListener() {\r\n                    @Override\r\n                    public void onClick() {\r\n                        updateVideoSettings();\r\n                    }\r\n                }).show(getSupportFragmentManager(), \"\");\r\n            }\r\n        });\r\n\r\n        btn_set_fps.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                new DialogFrameRate(new DialogFragmentBase.IVideoSettingListener() {\r\n                    @Override\r\n                    public void onClick() {\r\n                        updateVideoSettings();\r\n                    }\r\n                }).show(getSupportFragmentManager(), \"\");\r\n            }\r\n        });\r\n\r\n\r\n        mImgRec.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (isFirstTimeReach(THE_FIRST_TIME_SCREEN_RECORD)) return;\r\n                if (isMyServiceRunning(getApplicationContext(), StreamingService.class)) {\r\n                    MyUtils.showSnackBarNotification(mImgRec, \"LiveStream service is running!\", Snackbar.LENGTH_INDEFINITE);\r\n                    return;\r\n                }\r\n                if (isMyServiceRunning(getApplicationContext(), ControllerService.class)) {\r\n                    MyUtils.showSnackBarNotification(mImgRec, \"Recording service is running!\", Snackbar.LENGTH_LONG);\r\n                    return;\r\n                }\r\n                mMode = MyUtils.MODE_RECORDING;\r\n\r\n                shouldStartControllerService();\r\n\r\n            }\r\n        });\r\n\r\n        LinearLayout lnFAQ = findViewById(R.id.ln_btn_faq);\r\n        lnFAQ.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                showFAQFragment();\r\n            }\r\n        });\r\n\r\n        LinearLayout react_cam = findViewById(R.id.ln_react_cam);\r\n        react_cam.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (checkServiceBusy()) return;\r\n\r\n                showDialogPickVideo(REQUEST_VIDEO_FOR_REACT_CAM);\r\n            }\r\n        });\r\n\r\n        ImageView btn_live = findViewById(R.id.img_live);\r\n        btn_live.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (isFirstTimeReach(THE_FIRST_TIME_LIVESTREAM)) return;\r\n                showLiveStreamFragment();\r\n            }\r\n        });\r\n\r\n        LinearLayout btn_commentary = findViewById(R.id.ln_btn_commentary);\r\n        btn_commentary.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                showDialogPickVideo(REQUEST_VIDEO_FOR_COMMENTARY);\r\n            }\r\n        });\r\n\r\n        LinearLayout btn_projects = findViewById(R.id.ln_btn_projects);\r\n        btn_projects.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                showInterstitialAd(REQUEST_SHOW_PROJECTS_DEFAULT);\r\n            }\r\n        });\r\n\r\n        LinearLayout btn_editor = findViewById(R.id.ln_btn_video_editor);\r\n        btn_editor.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                showDialogPickVideo(REQUEST_VIDEO_FOR_VIDEO_EDIT);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void showLiveStreamFragment() {\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .add(R.id.frame_layout_fragment, new LiveStreamingFragment(), \"\")\r\n                .addToBackStack(\"\")\r\n                .commit();\r\n    }\r\n\r\n    public void showFAQFragment() {\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .add(R.id.frame_layout_fragment, new FragmentFAQ(), \"\")\r\n                .addToBackStack(\"\")\r\n                .commit();\r\n    }\r\n\r\n    private boolean checkServiceBusy() {\r\n        boolean bb = false;\r\n        if (isMyServiceRunning(this, ExecuteService.class)) {\r\n            bb = true;\r\n            new AlertDialog.Builder(this)\r\n                    .setTitle(\"Please wait!\")\r\n                    .setMessage(\"Your previous video in processing, please check in status bar!\")\r\n                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                        }\r\n                    })\r\n                    .setIcon(android.R.drawable.ic_dialog_info)\r\n                    .show();\r\n        }\r\n        return bb;\r\n    }\r\n\r\n    private boolean isFirstTimeReach(String type) {\r\n        if (type.equals(THE_FIRST_TIME_SCREEN_RECORD))\r\n            if (SettingManager2.getFirstTimeRecord(this)) {\r\n                showTutorialScreenRecord();\r\n                SettingManager2.setFirstTimeRecord(this, false);\r\n                return true;\r\n            }\r\n\r\n        if (type.equals(THE_FIRST_TIME_LIVESTREAM))\r\n            if (SettingManager2.getFirstTimeLiveStream(this)) {\r\n                showTutorialLiveStream();\r\n                SettingManager2.setFirstTimeLiveStream(this, false);\r\n                return true;\r\n            }\r\n\r\n        return false;\r\n    }\r\n\r\n    private void showTutorialScreenRecord() {\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .add(R.id.frame_layout_fragment, new GuidelineScreenRecordFragment())\r\n                .addToBackStack(\"\")\r\n                .commit();\r\n    }\r\n\r\n    private void showTutorialLiveStream() {\r\n        getSupportFragmentManager()\r\n                .beginTransaction()\r\n                .add(R.id.frame_layout_fragment, new GuidelineLiveStreamFragment())\r\n                .addToBackStack(\"\")\r\n                .commit();\r\n    }\r\n\r\n    private void updateVideoSettings() {\r\n\r\n        TextView tv_resolution = findViewById(R.id.tv_video_resolution);\r\n        TextView tv_bitrate = findViewById(R.id.tv_bitrate);\r\n        TextView tv_frame_rate = findViewById(R.id.tv_frame_rate);\r\n\r\n        tv_resolution.setText(SettingManager2.getVideoResolution(this));\r\n        tv_bitrate.setText(SettingManager2.getVideoBitrate(this));\r\n        tv_frame_rate.setText(SettingManager2.getVideoFPS(this));\r\n    }\r\n\r\n    private void generateVideoSettings() {\r\n        Core.resolution = SettingManager2.getVideoResolution(this);\r\n        Core.bitrate = SettingManager2.getVideoBitrate(this);\r\n        Core.frameRate = SettingManager2.getVideoFPS(this);\r\n    }\r\n\r\n    private void showDialogPickVideo(int requestVideoFor) {\r\n        Bundle bundle = new Bundle();\r\n        bundle.putInt(ARG_PARAM1, requestVideoFor);\r\n        DialogSelectVideoSource.newInstance(new DialogFragmentBase.ISelectVideoSourceListener() {\r\n            @Override\r\n            public void onClick() {\r\n            }\r\n\r\n            @Override\r\n            public void onClickCameraRoll() {\r\n                showDialogPickFromGallery(requestVideoFor);\r\n            }\r\n\r\n            @Override\r\n            public void onClickMyRecordings() {\r\n                showInterstitialAd(requestVideoFor);\r\n            }\r\n        }, bundle).show(getSupportFragmentManager(), \"\");\r\n    }\r\n\r\n    private void showMyRecordings(int from_code) {\r\n        Intent intent = new Intent(this, ProjectsActivity.class);\r\n        intent.putExtra(\"key_from_code\", from_code);\r\n        startActivity(intent);\r\n    }\r\n\r\n    public void showDialogPickFromGallery(int from_code) {\r\n        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Video.Media.EXTERNAL_CONTENT_URI); // todo: this thing might need some work :/, eg open from google drive, stuff like that\r\n        intent.setTypeAndNormalize(\"video/*\");\r\n//            intent.setAction(Intent.ACTION_GET_CONTENT);\r\n//            intent.addCategory(Intent.CATEGORY_OPENABLE);\r\n        startActivityForResult(Intent.createChooser(intent, getString(R.string.select_video_source)), from_code);\r\n    }\r\n\r\n\r\n    InterstitialAd mInterstitialAdAdmob = null;\r\n\r\n    int loadAgain = 0;\r\n    public void createInterstitialAdmob() {\r\n        if (SettingManager2.getRemoveAds(this)) {\r\n            mInterstitialAdAdmob = null;\r\n            return;\r\n        }\r\n        AdRequest adRequest = new AdRequest.Builder().build();\r\n        InterstitialAd.load(getApplicationContext(), \"ca-app-pub-3940256099942544/1033173712\", adRequest,\r\n                new InterstitialAdLoadCallback() {\r\n                    @Override\r\n                    public void onAdLoaded(@NonNull InterstitialAd interstitialAd) {\r\n                        // The mInterstitialAd reference will be null until\r\n                        // an ad is loaded.\r\n                        mInterstitialAdAdmob = interstitialAd;\r\n                        loadAgain = 0;\r\n                    }\r\n\r\n                    @Override\r\n                    public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {\r\n                        // Handle the error\r\n                        mInterstitialAdAdmob = null;\r\n//                        loadAgain++;\r\n//                        if (loadAgain < 2)\r\n//                            createInterstitialAdmob();\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void showInterstitialAd(int from_code) {\r\n        if (mInterstitialAdAdmob != null) {\r\n            mInterstitialAdAdmob.show(this);\r\n            mInterstitialAdAdmob.setFullScreenContentCallback(new FullScreenContentCallback() {\r\n                @Override\r\n                public void onAdClicked() {\r\n                }\r\n\r\n                @Override\r\n                public void onAdDismissedFullScreenContent() {\r\n                    showMyRecordings(from_code);\r\n                    createInterstitialAdmob();\r\n                }\r\n\r\n                @Override\r\n                public void onAdFailedToShowFullScreenContent(AdError adError) {\r\n                    showMyRecordings(from_code);\r\n                }\r\n\r\n                @Override\r\n                public void onAdImpression() {\r\n                }\r\n\r\n                @Override\r\n                public void onAdShowedFullScreenContent() {\r\n                }\r\n            });\r\n        } else {\r\n            showMyRecordings(from_code);\r\n        }\r\n    }\r\n\r\n    private void requestPermissions() {\r\n\r\n        // PERMISSION DRAW OVER\r\n        if (!Settings.canDrawOverlays(this)) {\r\n\r\n            System.out.println(\"thanhlv Draw over other app permission not available 1111111\");\r\n            Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\r\n                    Uri.parse(\"package:\" + getPackageName()));\r\n            startActivityForResult(intent, PERMISSION_DRAW_OVER_WINDOW);\r\n        }\r\n        ActivityCompat.requestPermissions(this, mPermission, PERMISSION_REQUEST_CODE);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == PERMISSION_REQUEST_CODE) {\r\n            if (grantResults.length > 0) {\r\n                int granted = PackageManager.PERMISSION_GRANTED;\r\n                for (int grantResult : grantResults) {\r\n                    if (grantResult != granted) {\r\n                        MyUtils.showSnackBarNotification(mImgRec, \"Please grant all permissions to record screen.\", Snackbar.LENGTH_LONG);\r\n                        return;\r\n                    }\r\n                }\r\n//                shouldStartControllerService();\r\n            }\r\n        }\r\n    }\r\n\r\n    public void shouldStartControllerService() {\r\n        if (!hasCaptureIntent())\r\n            requestScreenCaptureIntent();\r\n\r\n        if (hasPermission()) {\r\n            startControllerService();\r\n        } else {\r\n            requestPermissions();\r\n//            if(!hasCaptureIntent())\r\n//                requestScreenCaptureIntent();\r\n        }\r\n    }\r\n\r\n    private boolean hasCaptureIntent() {\r\n        return mScreenCaptureIntent != null;// || mScreenCaptureResultCode == MyUtils.RESULT_CODE_FAILED;\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        AppOpenManager.isPickFromGallery = true;\r\n        if (requestCode == REQUEST_VIDEO_FOR_REACT_CAM && resultCode == RESULT_OK) {\r\n            assert data != null;\r\n\r\n            final Uri selectedUri = data.getData();\r\n\r\n            if (selectedUri != null) {\r\n                String pathVideo = \"\";\r\n                try {\r\n                    pathVideo = PathUtil.getPath(this, selectedUri);\r\n                } catch (URISyntaxException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(VIDEO_PATH_KEY, pathVideo);\r\n                Intent intent = new Intent(MainActivity.this, CompressBeforeReactCamActivity.class);\r\n                intent.putExtras(bundle);\r\n                startActivity(intent);\r\n            } else {\r\n//                Toast.makeText(MainActivity.this, \"R.string.toast_cannot_retrieve_selected_video\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n\r\n        if (requestCode == REQUEST_VIDEO_FOR_COMMENTARY && resultCode == RESULT_OK) {\r\n            final Uri selectedUri = data.getData();\r\n\r\n            if (selectedUri != null) {\r\n                String pathVideo = \"\";\r\n\r\n                try {\r\n                    pathVideo = PathUtil.getPath(this, selectedUri);\r\n                } catch (URISyntaxException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                System.out.println(\"thanhlv REQUEST_VIDEO_FOR_COMMENTARY === \" + pathVideo);\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(VIDEO_PATH_KEY, pathVideo);\r\n                Intent intent = new Intent(MainActivity.this, CommentaryActivity.class);\r\n                intent.putExtras(bundle);\r\n                startActivity(intent);\r\n            }\r\n        }\r\n\r\n        if (requestCode == REQUEST_VIDEO_FOR_VIDEO_EDIT && resultCode == RESULT_OK) {\r\n            System.out.println(\"thanhlv REQUEST_VIDEO_FOR_COMMENTARY\");\r\n            final Uri selectedUri = data.getData();\r\n\r\n            if (selectedUri != null) {\r\n                String pathVideo = \"\";\r\n\r\n                try {\r\n                    pathVideo = PathUtil.getPath(this, selectedUri);\r\n                } catch (URISyntaxException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                System.out.println(\"thanhlv REQUEST_VIDEO_FOR_COMMENTARY === \" + pathVideo);\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(VIDEO_PATH_KEY, pathVideo);\r\n                Intent intent = new Intent(MainActivity.this, VideoEditorActivity.class);\r\n                intent.putExtras(bundle);\r\n                startActivity(intent);\r\n            }\r\n        }\r\n\r\n        if (requestCode == PERMISSION_DRAW_OVER_WINDOW) {\r\n\r\n            //Check if the permission is granted or not.\r\n            if (resultCode != RESULT_OK) { //Permission is not available\r\n                System.out.println(\"thanhlv Draw over other app permission not available\");\r\n                MyUtils.showSnackBarNotification(mImgRec, \"Draw over other app permission not available.\", Snackbar.LENGTH_SHORT);\r\n            }\r\n        } else if (requestCode == PERMISSION_RECORD_DISPLAY) {\r\n            if (resultCode != RESULT_OK) {\r\n                MyUtils.showSnackBarNotification(mImgRec, \"Recording display permission not available.\", Snackbar.LENGTH_SHORT);\r\n                mScreenCaptureIntent = null;\r\n            } else {\r\n                mScreenCaptureIntent = data;\r\n                mScreenCaptureIntent.putExtra(MyUtils.SCREEN_CAPTURE_INTENT_RESULT_CODE, resultCode);\r\n                mScreenCaptureResultCode = resultCode;\r\n\r\n                shouldStartControllerService();\r\n            }\r\n        } else {\r\n            super.onActivityResult(requestCode, resultCode, data);\r\n        }\r\n    }\r\n\r\n    private void startControllerService() {\r\n        Intent controller = new Intent(MainActivity.this, ControllerService.class);\r\n\r\n        controller.setAction(MyUtils.ACTION_INIT_CONTROLLER);\r\n\r\n        controller.putExtra(MyUtils.KEY_CAMERA_AVAILABLE, checkCameraHardware(this));\r\n\r\n        controller.putExtra(MyUtils.KEY_CONTROLlER_MODE, mMode);\r\n\r\n        controller.putExtra(Intent.EXTRA_INTENT, mScreenCaptureIntent);\r\n\r\n        if (mMode == MyUtils.MODE_STREAMING) {\r\n            Bundle bundle = new Bundle();\r\n            bundle.putSerializable(MyUtils.STREAM_PROFILE, mStreamProfile);\r\n            controller.putExtras(bundle);\r\n        }\r\n\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            startForegroundService(controller);\r\n        } else {\r\n            startService(controller);\r\n        }\r\n\r\n//        if (mMode == MyUtils.MODE_RECORDING)\r\n//            finish();\r\n    }\r\n\r\n    /**\r\n     * Check if this device has a camera\r\n     */\r\n    private boolean checkCameraHardware(Context context) {\r\n        if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {\r\n            // this device has a camera\r\n            return true;\r\n        } else {\r\n            // no camera on this device\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.M)\r\n    public boolean hasPermission() {\r\n        int granted = PackageManager.PERMISSION_GRANTED;\r\n\r\n        return ContextCompat.checkSelfPermission(this, mPermission[0]) == granted\r\n                && ContextCompat.checkSelfPermission(this, mPermission[1]) == granted\r\n                && ContextCompat.checkSelfPermission(this, mPermission[2]) == granted\r\n                && ContextCompat.checkSelfPermission(this, mPermission[3]) == granted\r\n                && Settings.canDrawOverlays(this)\r\n                && mScreenCaptureIntent != null\r\n                && mScreenCaptureResultCode != MyUtils.RESULT_CODE_FAILED;\r\n    }\r\n\r\n    public void setStreamProfile(StreamProfile streamProfile) {\r\n        this.mStreamProfile = streamProfile;\r\n\r\n    }\r\n\r\n    public void notifyUpdateStreamProfile() {\r\n        if (mMode == MyUtils.MODE_STREAMING) {\r\n            Intent controller = new Intent(MainActivity.this, ControllerService.class);\r\n\r\n            controller.setAction(MyUtils.ACTION_UPDATE_STREAM_PROFILE);\r\n            Bundle bundle = new Bundle();\r\n            bundle.putSerializable(MyUtils.STREAM_PROFILE, mStreamProfile);\r\n            controller.putExtras(bundle);\r\n            startService(controller);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ATVizPro/src/main/java/com/examples/atscreenrecord/ui/activities/MainActivity.java b/ATVizPro/src/main/java/com/examples/atscreenrecord/ui/activities/MainActivity.java
--- a/ATVizPro/src/main/java/com/examples/atscreenrecord/ui/activities/MainActivity.java	(revision 17a2f32f75f8a5dc64a82fb1cfaed6a0e03b2567)
+++ b/ATVizPro/src/main/java/com/examples/atscreenrecord/ui/activities/MainActivity.java	(date 1664378679450)
@@ -209,21 +209,13 @@
                 .setListener(purchasesUpdatedListener)
                 .enablePendingPurchases()
                 .build();
-
 //        SettingManager2.setRemoveAds(this, false);
         initViews();
-
-        System.out.println("thanhlv desity =============== " + App.getAppContext().getResources().getDisplayMetrics().scaledDensity);
         connectGooglePlayBilling();
-
         if (!hasPermission()) requestPermissions();
-
         Intent intent = getIntent();
         if (intent != null)
             handleIncomingRequest(intent);
-
-//        File tesst = new File(MyUtils.getBaseStorageDirectory2(), MyUtils.createFileName(".mp4"));
-
     }
 
     private void connectGooglePlayBilling() {
